// vite.config.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///C:/Users/TEANG%20TELA/Desktop/wedo2/front/node_modules/vite/dist/node/index.js";
import vue from "file:///C:/Users/TEANG%20TELA/Desktop/wedo2/front/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueDevTools from "file:///C:/Users/TEANG%20TELA/Desktop/wedo2/front/node_modules/vite-plugin-vue-devtools/dist/vite.mjs";
var __vite_injected_original_import_meta_url = "file:///C:/Users/TEANG%20TELA/Desktop/wedo2/front/vite.config.js";
var vite_config_default = defineConfig({
  plugins: [vue(), vueDevTools()],
  server: {
    port: 3e3
  },
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxURUFORyBURUxBXFxcXERlc2t0b3BcXFxcd2VkbzJcXFxcZnJvbnRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXFRFQU5HIFRFTEFcXFxcRGVza3RvcFxcXFx3ZWRvMlxcXFxmcm9udFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvVEVBTkclMjBURUxBL0Rlc2t0b3Avd2VkbzIvZnJvbnQvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgeyBmaWxlVVJMVG9QYXRoLCBVUkwgfSBmcm9tIFwibm9kZTp1cmxcIjtcclxuXHJcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbmltcG9ydCB2dWUgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXZ1ZVwiO1xyXG5pbXBvcnQgdnVlRGV2VG9vbHMgZnJvbSBcInZpdGUtcGx1Z2luLXZ1ZS1kZXZ0b29sc1wiO1xyXG5cclxuLy8gaHR0cHM6Ly92aXRlLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgcGx1Z2luczogW3Z1ZSgpLCB2dWVEZXZUb29scygpXSxcclxuICBzZXJ2ZXI6IHtcclxuICAgIHBvcnQ6IDMwMDAsXHJcbiAgfSxcclxuICByZXNvbHZlOiB7XHJcbiAgICBhbGlhczoge1xyXG4gICAgICBcIkBcIjogZmlsZVVSTFRvUGF0aChuZXcgVVJMKFwiLi9zcmNcIiwgaW1wb3J0Lm1ldGEudXJsKSksXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuXHJcbi8vIGltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXHJcbi8vIGltcG9ydCB2dWUgZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJ1xyXG4vLyBpbXBvcnQgeyBWaXRlUFdBIH0gZnJvbSAndml0ZS1wbHVnaW4tcHdhJ1xyXG4vLyBpbXBvcnQgcGF0aCBmcm9tICdwYXRoJyAvLyBcdUQ4M0RcdURDNDggaW1wb3J0IHBhdGhcclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbi8vICAgcGx1Z2luczogW1xyXG4vLyAgICAgdnVlKCksXHJcbi8vICAgICBWaXRlUFdBKHtcclxuLy8gICAgICAgcmVnaXN0ZXJUeXBlOiAnYXV0b1VwZGF0ZScsXHJcbi8vICAgICAgIGluY2x1ZGVBc3NldHM6IFsnZmF2aWNvbi5pY28nLCAncm9ib3RzLnR4dCcsICdhcHBsZS10b3VjaC1pY29uLnBuZyddLFxyXG4vLyAgICAgICBtYW5pZmVzdDoge1xyXG4vLyAgICAgICAgIG5hbWU6ICdNeSBBcHAnLFxyXG4vLyAgICAgICAgIHNob3J0X25hbWU6ICdBcHAnLFxyXG4vLyAgICAgICAgIHN0YXJ0X3VybDogJy8nLFxyXG4vLyAgICAgICAgIGRpc3BsYXk6ICdzdGFuZGFsb25lJyxcclxuLy8gICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAnI2ZmZmZmZicsXHJcbi8vICAgICAgICAgdGhlbWVfY29sb3I6ICcjNDJiODgzJyxcclxuLy8gICAgICAgICBpY29uczogW1xyXG4vLyAgICAgICAgICAge1xyXG4vLyAgICAgICAgICAgICBzcmM6ICcvaW1hZ2UvRElTLnBuZycsXHJcbi8vICAgICAgICAgICAgIHNpemVzOiAnNTEyeDUxMicsXHJcbi8vICAgICAgICAgICAgIHR5cGU6ICdpbWFnZS9wbmcnXHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgXVxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgICB3b3JrYm94OiB7XHJcbi8vICAgICAgICAgbWF4aW11bUZpbGVTaXplVG9DYWNoZUluQnl0ZXM6IDEwICogMTAyNCAqIDEwMjRcclxuLy8gICAgICAgfVxyXG4vLyAgICAgfSlcclxuLy8gICBdLFxyXG4vLyAgIHNlcnZlcjoge1xyXG4vLyAgICAgcG9ydDogMzAwMCxcclxuLy8gICB9LFxyXG4vLyAgIHJlc29sdmU6IHtcclxuLy8gICAgIGFsaWFzOiB7XHJcbi8vICAgICAgICdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vc3JjJykgLy8gXHVEODNEXHVEQzQ4IGFkZCB0aGlzXHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG4vLyB9KVxyXG5cclxuXHJcbi8vIGltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXHJcbi8vIGltcG9ydCB2dWUgZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJ1xyXG4vLyBpbXBvcnQgeyBWaXRlUFdBIH0gZnJvbSAndml0ZS1wbHVnaW4tcHdhJ1xyXG4vLyBpbXBvcnQgcGF0aCBmcm9tICdwYXRoJyAvLyBcdUQ4M0RcdURDNDggaW1wb3J0IHBhdGhcclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbi8vICAgcGx1Z2luczogW1xyXG4vLyAgICAgdnVlKCksXHJcbi8vICAgICBWaXRlUFdBKHtcclxuLy8gICAgICAgcmVnaXN0ZXJUeXBlOiAnYXV0b1VwZGF0ZScsICAgICAgICAvLyBjaGVjayAmIGluc3RhbGwgdXBkYXRlcyBpbiBiZ1xyXG4vLyAgICAgICBpbmplY3RSZWdpc3RlcjogJ2F1dG8nLCAgICAgICAgICAgIC8vIGluamVjdHMgdGhlIHJlZ2lzdGVyIGNvZGUgZm9yIHlvdVxyXG4vLyAgICAgICBpbmNsdWRlQXNzZXRzOiBbJ2Zhdmljb24uaWNvJywgJ3JvYm90cy50eHQnXSxcclxuLy8gICAgICAgc2VsZkRlc3Ryb3lpbmc6IHRydWUsXHJcbi8vICAgICAgIG1hbmlmZXN0OiB7XHJcbi8vICAgICAgICAgbmFtZTogJ1Njb3JlIE1hbmFnZSBTeXN0ZW0nLFxyXG4vLyAgICAgICAgIHNob3J0X25hbWU6ICdTTVMnLFxyXG4vLyAgICAgICAgIGRlc2NyaXB0aW9uOiAnU2NvcmUgTWFuYWdlIFN5c3RlbScsXHJcbi8vICAgICAgICAgc3RhcnRfdXJsOiAnLycsICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0YW50IGZvciBzY29wZVxyXG4vLyAgICAgICAgIHNjb3BlOiAnLycsICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgU1cgY29udHJvbCB3aG9sZSBhcHBcclxuLy8gICAgICAgICBkaXNwbGF5OiAnc3RhbmRhbG9uZScsXHJcbi8vICAgICAgICAgYmFja2dyb3VuZF9jb2xvcjogJyNmZmZmZmYnLFxyXG4vLyAgICAgICAgIHRoZW1lX2NvbG9yOiAnIzYzNjM2M2ZmJyxcclxuLy8gICAgICAgICBpY29uczogW1xyXG4vLyAgICAgICAgICAgeyBzcmM6ICcvaW1hZ2UvRElTLnBuZycsIHNpemVzOiAnMTkyeDE5MicsIHR5cGU6ICdpbWFnZS9wbmcnIH0sXHJcbi8vICAgICAgICAgICB7IHNyYzogJy9pbWFnZS9ESVMucG5nJywgc2l6ZXM6ICc1MTJ4NTEyJywgdHlwZTogJ2ltYWdlL3BuZycgfSxcclxuLy8gICAgICAgICBdLFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgICB3b3JrYm94OiB7XHJcbi8vICAgICAgICAgc2tpcFdhaXRpbmc6IHRydWUsICAgICAgICAgICAgICAgLy8gYWN0aXZhdGUgbmV3IFNXIGltbWVkaWF0ZWx5XHJcbi8vICAgICAgICAgY2xpZW50c0NsYWltOiB0cnVlLCAgICAgICAgICAgICAgLy8gdGFrZSBjb250cm9sIG9mIG9wZW4gdGFic1xyXG4vLyAgICAgICAgIGNsZWFudXBPdXRkYXRlZENhY2hlczogdHJ1ZSxcclxuLy8gICAgICAgICBnbG9iUGF0dGVybnM6IFsnKiovKi57anMsY3NzLGh0bWwsaWNvLHBuZyxzdmcsd2VicH0nXSxcclxuLy8gICAgICAgICBuYXZpZ2F0ZUZhbGxiYWNrRGVueWxpc3Q6IFsvXlxcL2FwaVxcLy9dLCAvLyBkb25cdTIwMTl0IGhpamFjayBBUElcclxuLy8gICAgICAgICBtYXhpbXVtRmlsZVNpemVUb0NhY2hlSW5CeXRlczogNV8wMDBfMDAwLCAvLyB5b3VyIDVNQiBsaW1pdFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgICAvLyBPcHRpb25hbDogZW5hYmxlIGluIGRldiB0byB0ZXN0IHVwZGF0ZXNcclxuLy8gICAgICAgLy8gZGV2T3B0aW9uczogeyBlbmFibGVkOiB0cnVlIH1cclxuLy8gICAgIH0pLFxyXG5cclxuLy8gICBdLFxyXG4vLyAgIHNlcnZlcjoge1xyXG4vLyAgICAgcG9ydDogMzAwMCxcclxuLy8gICB9LFxyXG4vLyAgIHJlc29sdmU6IHtcclxuLy8gICAgIGFsaWFzOiB7XHJcbi8vICAgICAgICdAJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vc3JjJykgLy8gXHVEODNEXHVEQzQ4IGFkZCB0aGlzXHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG4vLyB9KVxyXG5cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBcVQsU0FBUyxlQUFlLFdBQVc7QUFFeFYsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTO0FBQ2hCLE9BQU8saUJBQWlCO0FBSnlLLElBQU0sMkNBQTJDO0FBT2xQLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0FBQUEsRUFDOUIsUUFBUTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLEtBQUssY0FBYyxJQUFJLElBQUksU0FBUyx3Q0FBZSxDQUFDO0FBQUEsSUFDdEQ7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
